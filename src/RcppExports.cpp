// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <../../inst/include/scinet.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_gene_activities
mat compute_gene_activities(mat A, uvec samples, bool consider_baseline_expression, int thread_no);
RcppExport SEXP _SCINET_compute_gene_activities(SEXP ASEXP, SEXP samplesSEXP, SEXP consider_baseline_expressionSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< uvec >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_baseline_expression(consider_baseline_expressionSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gene_activities(A, samples, consider_baseline_expression, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// compute_gene_activities_decoupled
mat compute_gene_activities_decoupled(mat archetypes, mat H, uvec samples, bool consider_baseline_expression, int thread_no);
RcppExport SEXP _SCINET_compute_gene_activities_decoupled(SEXP archetypesSEXP, SEXP HSEXP, SEXP samplesSEXP, SEXP consider_baseline_expressionSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type archetypes(archetypesSEXP);
    Rcpp::traits::input_parameter< mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< uvec >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_baseline_expression(consider_baseline_expressionSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gene_activities_decoupled(archetypes, H, samples, consider_baseline_expression, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// compute_gene_activities_full
mat compute_gene_activities_full(mat A, int thread_no);
RcppExport SEXP _SCINET_compute_gene_activities_full(SEXP ASEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gene_activities_full(A, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// subsample_gene_activities
mat subsample_gene_activities(mat A, uvec rows, uvec samples, int total_subsamples, int cells_per_subsample, int thread_no, int seed);
RcppExport SEXP _SCINET_subsample_gene_activities(SEXP ASEXP, SEXP rowsSEXP, SEXP samplesSEXP, SEXP total_subsamplesSEXP, SEXP cells_per_subsampleSEXP, SEXP thread_noSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< uvec >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< uvec >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type total_subsamples(total_subsamplesSEXP);
    Rcpp::traits::input_parameter< int >::type cells_per_subsample(cells_per_subsampleSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(subsample_gene_activities(A, rows, samples, total_subsamples, cells_per_subsample, thread_no, seed));
    return rcpp_result_gen;
END_RCPP
}
// subsample_gene_activities_decoupled
mat subsample_gene_activities_decoupled(mat archetypes, mat H, uvec rows, uvec samples, int total_subsamples, int cells_per_subsample, int thread_no, int seed);
RcppExport SEXP _SCINET_subsample_gene_activities_decoupled(SEXP archetypesSEXP, SEXP HSEXP, SEXP rowsSEXP, SEXP samplesSEXP, SEXP total_subsamplesSEXP, SEXP cells_per_subsampleSEXP, SEXP thread_noSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type archetypes(archetypesSEXP);
    Rcpp::traits::input_parameter< mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< uvec >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< uvec >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type total_subsamples(total_subsamplesSEXP);
    Rcpp::traits::input_parameter< int >::type cells_per_subsample(cells_per_subsampleSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(subsample_gene_activities_decoupled(archetypes, H, rows, samples, total_subsamples, cells_per_subsample, thread_no, seed));
    return rcpp_result_gen;
END_RCPP
}
// construct_cell_networks
field<sp_mat> construct_cell_networks(sp_mat net, mat gene_activities, int thread_no);
RcppExport SEXP _SCINET_construct_cell_networks(SEXP netSEXP, SEXP gene_activitiesSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type net(netSEXP);
    Rcpp::traits::input_parameter< mat >::type gene_activities(gene_activitiesSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_cell_networks(net, gene_activities, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// construct_cell_networks_noPrior
field<mat> construct_cell_networks_noPrior(mat gene_activities, int thread_no);
RcppExport SEXP _SCINET_construct_cell_networks_noPrior(SEXP gene_activitiesSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type gene_activities(gene_activitiesSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_cell_networks_noPrior(gene_activities, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// construct_cell_networks_summary
field<sp_mat> construct_cell_networks_summary(sp_mat net, mat gene_activities, int total_subsamples, int cells_per_subsample, int seed, int thread_no);
RcppExport SEXP _SCINET_construct_cell_networks_summary(SEXP netSEXP, SEXP gene_activitiesSEXP, SEXP total_subsamplesSEXP, SEXP cells_per_subsampleSEXP, SEXP seedSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type net(netSEXP);
    Rcpp::traits::input_parameter< mat >::type gene_activities(gene_activitiesSEXP);
    Rcpp::traits::input_parameter< int >::type total_subsamples(total_subsamplesSEXP);
    Rcpp::traits::input_parameter< int >::type cells_per_subsample(cells_per_subsampleSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_cell_networks_summary(net, gene_activities, total_subsamples, cells_per_subsample, seed, thread_no));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SCINET_compute_gene_activities", (DL_FUNC) &_SCINET_compute_gene_activities, 4},
    {"_SCINET_compute_gene_activities_decoupled", (DL_FUNC) &_SCINET_compute_gene_activities_decoupled, 5},
    {"_SCINET_compute_gene_activities_full", (DL_FUNC) &_SCINET_compute_gene_activities_full, 2},
    {"_SCINET_subsample_gene_activities", (DL_FUNC) &_SCINET_subsample_gene_activities, 7},
    {"_SCINET_subsample_gene_activities_decoupled", (DL_FUNC) &_SCINET_subsample_gene_activities_decoupled, 8},
    {"_SCINET_construct_cell_networks", (DL_FUNC) &_SCINET_construct_cell_networks, 3},
    {"_SCINET_construct_cell_networks_noPrior", (DL_FUNC) &_SCINET_construct_cell_networks_noPrior, 2},
    {"_SCINET_construct_cell_networks_summary", (DL_FUNC) &_SCINET_construct_cell_networks_summary, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SCINET(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
